# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SaveOpenBackNext.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

# import thêm các thư viện hỗ trợ
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
import cv2, imutils



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(30, 70, 641, 471))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.BackButton = QtWidgets.QPushButton(self.widget)
        self.BackButton.setObjectName("BackButton")
        self.gridLayout.addWidget(self.BackButton, 2, 0, 1, 1)
        self.SaveButton = QtWidgets.QPushButton(self.widget)
        self.SaveButton.setObjectName("SaveButton")
        self.gridLayout.addWidget(self.SaveButton, 0, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../../SaveOpen/SaveOpen/images/frame72.jpg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 2)
        self.verticalSlider = QtWidgets.QSlider(self.widget)
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.gridLayout.addWidget(self.verticalSlider, 1, 2, 1, 1)
        self.verticalSlider_2 = QtWidgets.QSlider(self.widget)
        self.verticalSlider_2.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_2.setObjectName("verticalSlider_2")
        self.gridLayout.addWidget(self.verticalSlider_2, 1, 3, 1, 1)
        self.OpenButton = QtWidgets.QPushButton(self.widget)
        self.OpenButton.setObjectName("OpenButton")
        self.gridLayout.addWidget(self.OpenButton, 0, 0, 1, 1)
        self.NextButton = QtWidgets.QPushButton(self.widget)
        self.NextButton.setObjectName("NextButton")
        self.gridLayout.addWidget(self.NextButton, 2, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)

        # các kết nối với nút nhấn và thanh trượt
        self.verticalSlider.valueChanged['int'].connect(self.brightness_value)
        self.verticalSlider_2.valueChanged['int'].connect(self.blur_value)
        self.BackButton.clicked.connect(self.back)
        self.NextButton.clicked.connect(self.next)
        self.OpenButton.clicked.connect(self.openImage)
        self.SaveButton.clicked.connect(self.savePhoto)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # Added code here
        self.filename=""
        self.link=""
        self.index=0
        

        
        
        self.tmp = None # Will hold the temporary image for display
        self.brightness_value_now = 0 # Updated brightness value
        self.blur_value_now = 0 # Updated blur value
    def openImage(self):
        filename= QFileDialog.getOpenFileName(filter="Image (*.*)")[0]

        check=filename.find(".")
        self.link=filename[:check-1]
        self.index=int(filename[check-1])  
        
        self.loadImage()
    def next(self):
        if self.index<100:  #           max: 15
            self.index+=1
        self.loadImage()
    def back(self):
        if self.index>0:   #           min : 0
            self.index-=1
        self.loadImage()


    def loadImage(self):
        """ This function will load the user selected image
	        and set it to label using the setPhoto function
        """
        self.filename="".join([self.link,str(self.index),".jpg"])

        self.image = cv2.imread(self.filename)
        self.setPhoto(self.image)
    def setPhoto(self,image):
        """ This function will take image input and resize it 
	        only for display purpose and convert it to QImage
	        to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image,width=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))
    
    def brightness_value(self,value):
        """ This function will take value from the slider
	        for the brightness from 0 to 99
        """
        self.brightness_value_now = value
        print('Brightness: ',value)
        self.update()
		
		
    def blur_value(self,value):
        """ This function will take value from the slider 
	        for the blur from 0 to 99 """
        self.blur_value_now = value
        print('Blur: ',value)
        self.update()

    def changeBrightness(self,img,value):
        """ This function will take an image (img) and the brightness
	        value. It will perform the brightness change using OpenCv
	        and after split, will merge the img and return it.
        """
        hsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)# chuyển ảnh BGR sang hsv
        h,s,v = cv2.split(hsv)
        # v là độ sáng
        lim = 255 - value
        v[v>lim] = 255
        v[v<=lim] += value
        final_hsv = cv2.merge((h,s,v)) # ghép 3 kênh lại thành 1
        img = cv2.cvtColor(final_hsv,cv2.COLOR_HSV2BGR) # chuyển về BGR
        return img
		
    def changeBlur(self,img,value):
        """ This function will take the img image and blur values as inputs.
	        After perform blur operation using opencv function, it returns 
	        the image img.
        """
        kernel_size = (value+1,value+1) # +1 is to avoid 0
        img = cv2.blur(img,kernel_size)
        return img
    def update(self):
        """ This function will update the photo according to the 
	        current values of blur and brightness and set it to photo label.
        """
        img = self.changeBrightness(self.image,self.brightness_value_now)
        img = self.changeBlur(img,self.blur_value_now)
        self.setPhoto(img)

    def savePhoto(self):
		
        filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
        cv2.imwrite(filename,self.tmp)
        print('Image saved as:',self.filename)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.BackButton.setText(_translate("MainWindow", "Back"))
        self.SaveButton.setText(_translate("MainWindow", "Save"))
        self.OpenButton.setText(_translate("MainWindow", "Open"))
        self.NextButton.setText(_translate("MainWindow", "Next"))


if __name__ == "__main__":
    """
    day la phan da chinh sua
    """
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
